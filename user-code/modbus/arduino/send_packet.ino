/*........................crc function.......................*/

static unsigned char auchCRCHi[] = {0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
} ;

static char auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
} ;

unsigned char crcval[8];
unsigned char crcval1[9];
unsigned char crcval2[6];

//crc function begins
unsigned short CRC16 ( unsigned char *puchMsg, unsigned short usDataLen, int hl)
{
unsigned char uchCRCHi = 0xff;
unsigned char uchCRCLo = 0xff;
unsigned int uIndex;
while(usDataLen--)
{
  uIndex = uchCRCLo ^ *puchMsg++;
  uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex];
  uchCRCHi = auchCRCLo[uIndex];
  
}
if (hl==1)
return (uchCRCHi);//<<8 ;
else
return(uchCRCLo);
}

/*..................crc ends....................*/

/*-----( Import needed libraries )-----*/
#include <SoftwareSerial.h>
/*-----( Declare Constants and Pin Numbers )-----*/
#define SSerialRX        10  //Serial Receive pin
#define SSerialTX        11  //Serial Transmit pin

#define SSerialTxControl 3   //RS485 Direction control

#define RS485Transmit    HIGH
#define RS485Receive     LOW

#define Pin13LED         13

/*-----( Declare objects )-----*/
SoftwareSerial RS485Serial(SSerialRX, SSerialTX); // RX, TX

/*-----( Declare Variables )-----*/
int i,j,t,t1,t2;
uint8_t byteReceived[8];
uint8_t byteSend[8];
//uint8_t byteReceivedold;
uint8_t byteReceived1=5;
unsigned short CRC16 ( unsigned char * puchMsg, unsigned short usDataLen, int hl );
uint8_t res[2];

uint8_t byteReceived1_a[11]; 
uint8_t byteReceived1_d[7]; 


void setup()   /****** SETUP: RUNS ONCE ******/
{ 
   i=0;
   t=0;
   t1=0;
   t2=0;
  // Start the built-in serial port, probably to Serial Monitor
  Serial.begin(9600);
  
  pinMode(Pin13LED, OUTPUT);   
  pinMode(SSerialTxControl, OUTPUT);    
  
  digitalWrite(SSerialTxControl, RS485Receive);  // Init Transceiver   
  
  // Start the software serial port, to another device
  RS485Serial.begin(9600);   // set the data rate 

}//--(end setup )---


void loop()   /****** LOOP: RUNS CONSTANTLY ******/
{
  digitalWrite(Pin13LED, HIGH);  // Show activity
  while(Serial.available()>0)
  {
    byteReceived[i++]= Serial.read();
    //byteReceived=Serial.readBytesUntil('1',byteReceivedold,7);
     if(i==8) 
    { 
       for(j=0;j<8;++j)
       crcval[j]=byteReceived[j];
       res[0] = CRC16 (crcval,8,0);
       res[1]= CRC16 (crcval,8,1);    
       if (res[0]==0 && res[1]==0)
       {
        digitalWrite(SSerialTxControl, RS485Transmit);  // Enable RS485 Transmit 
         
        RS485Serial.write(byteReceived[0]);          // Send byte to Remote Arduino
        RS485Serial.write(byteReceived[1]); 
        RS485Serial.write(byteReceived[2]); 
        RS485Serial.write(byteReceived[3]); 
        RS485Serial.write(byteReceived[4]); 
        RS485Serial.write(byteReceived[5]); 
        RS485Serial.write(byteReceived[6]); 
        RS485Serial.write(byteReceived[7]); 
        i=0;
        }
        }   
    
        digitalWrite(Pin13LED, LOW);  // Show activity    
        //delay(10);
        digitalWrite(SSerialTxControl, RS485Receive);  // Disable RS485 Transmit       
      }
  
      
      if(byteReceived[1]==3)
      {
      if (RS485Serial.available())  //Look for data from other Arduino
       {
          byteReceived1_a[t1++] = RS485Serial.read();   
          
          if(t1==11)
          { 
            for(j=1;j<10;j++)
            crcval1[j-1]=byteReceived1_a[j];
            res[0]= CRC16 (crcval1,9,0);
            res[1]= CRC16 (crcval1,9,1);    
            if (res[0]==0 && res[1]==0)
            {
            Serial.write(byteReceived1_a[0]);
            Serial.write(byteReceived1_a[1]);
            Serial.write(byteReceived1_a[2]);
            Serial.write(byteReceived1_a[3]);
            Serial.write(byteReceived1_a[4]);
            Serial.write(byteReceived1_a[5]);
            Serial.write(byteReceived1_a[6]);
            Serial.write(byteReceived1_a[7]);
            Serial.write(byteReceived1_a[8]);
            Serial.write(byteReceived1_a[9]);
            Serial.write(byteReceived1_a[10]);
            t1=0;
            }
          }
        }
      }
      
      else if(byteReceived[1]==1)
      {
        if (RS485Serial.available())  //Look for data from other Arduino
         {
          byteReceived1_d[t2++] = RS485Serial.read();    // Read received byte 
          if(t2==7)
          {            
            for(j=0;j<6;++j)
            crcval2[j]=byteReceived1_d[j];
            res[0] = CRC16 (crcval2,6,0);
            res[1]= CRC16 (crcval2,6,1);    
            if (res[0]==0 && res[1]==0)
            {            
            Serial.write(byteReceived1_d[0]);
            Serial.write(byteReceived1_d[1]);
            Serial.write(byteReceived1_d[2]);
            Serial.write(byteReceived1_d[3]);
            Serial.write(byteReceived1_d[4]);
            Serial.write(byteReceived1_d[5]);
            Serial.write(byteReceived1_d[6]);
            t2=0;
            }
          digitalWrite(Pin13LED, LOW);  // Show activity   
         }          
        }
      }


}//--(end main loop )---

//*********( THE END )***********
